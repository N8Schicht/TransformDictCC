#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"languageName":"csharp","name":"csharp"}]}}

#!csharp

using System;
using System.Net;
using System.IO;
using System.Text.RegularExpressions;

/* 
private string DecodeSpecialChar(string htmlSpecialChar)
{
    return WebUtility.HtmlDecode(htmlSpecialChar);
}
Console.WriteLine(DecodeSpecialChar("&#945;"));     //an Alpha
*/

var input = File.ReadAllLines(@"C:\tmp\dict.txt");      //source file
var output = new List<string>();
foreach(var line in input)
{
    string[] args = line.Split("\t");
    string german = args[0];
    string englisch = args[1];
    
    if(englisch.Contains("..."))                            // idiom with wildcard is not searchable, so skip it
        continue;
    
    englisch = Regex.Replace(englisch, @"\[.*?\]", "");     //remove [...]
    englisch = Regex.Replace(englisch, @"<.*?>", "");       //remove <...>
    englisch = Regex.Replace(englisch, @"{.*?}", "");       //remove {...}
    englisch = Regex.Replace(englisch, @"\(.*?\)", "");     //remove (...)
    englisch = Regex.Replace(englisch, @"  ", " ");         //replace double-spaces
    englisch = englisch.Trim();                             //trim start/end spaces    
    
    var spellings = englisch.Split(" / ");                  // split alternative spellings
    foreach(var alt in spellings.Where(s => s != ""))
    {
        output.Add(alt + "\t" + german);
    }
}
output.Sort();
File.WriteAllLines(@"C:\tmp\dict_en-de.txt", output);       // target file
